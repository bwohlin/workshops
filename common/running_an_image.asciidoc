== Running a Docker Container Image

Let's start by just running a plain ole' Apache HTTPD server in OpenShift. By way of doing this I will also introduce you to many of the major pieces in an OpenShift project.

We are going to move back and forth between the command line and the web UI so please have them both ready to go and logged in as the user. 

=== Create a Project

In order to get going we need to create a _project_ to hold all of the pieces of our application(s). A _project_ is a materialized _namespace_ in Kubernetes to provide permissions and access control between different users resources. 

The first thing we need to do as a user is create the _project_

[source, bash]
----
> oc new-project webpages
Now using project "webpages" on server "https://10.2.2.2:8443".
...
----

We created a _project_ named webpages and all subsequent commands will be executed against this _project_. 

There is a special _project_ that admins have access to in the cluster named "openshift". Any templates (explained later) or other objects placed in this project are available to all users of the cluster with read permissions. 

To see all the projects that you have permissions to see go ahead and:

[source, bash]
----

> oc get projects

----

=== Bringing in Docker Container Image from DockerHub

Typically you will not bring in images directly from DockerHub because of the numerous flaws and vulnerabilities in DockerHub images. One big probem for many images on DockerHub is that they run as _root_ user when it is not even required. By default, an OpenShift cluster will not let you run images as _root_. In the case of the A1VM we turn off this security to allow for ease of use. 

Let's go ahead and start with an NGINX image put out by the https://hub.docker.com/r/centos/nginx-16-centos7/[CentOS group]. Bringing this into our OpenShift environment is as simple as 

[source, bash]
----

> oc new-app centos/nginx-16-centos7
--> Found Docker image 32eebae (13 days old) from Docker Hub for "centos/nginx-16-centos7"

    * An image stream will be created as "nginx-16-centos7:latest" that will track this image
    * This image will be deployed in deployment config "nginx-16-centos7"
    * Ports 443/tcp, 80/tcp will be load balanced by service "nginx-16-centos7"
      * Other containers can access this service through the hostname "nginx-16-centos7"
    * This image declares volumes and will default to use non-persistent, host-local storage.
      You can add persistent volumes later by running 'volume dc/nginx-16-centos7 --add ...'
    * WARNING: Image "centos/nginx-16-centos7" runs as the 'root' user which may not be permitted by your cluster administrator

--> Creating resources with label app=nginx-16-centos7 ...
    imagestream "nginx-16-centos7" created
    deploymentconfig "nginx-16-centos7" created
    service "nginx-16-centos7" created
--> Success
    Run 'oc status' to view your app.

----

The command 'oc new-app' actually does a lot of things for you. The idea behind new-app is to "do the right thing" when given a non-OpenShift artifact, I like to call it 'oc translate'. So in this case we are telling OpenShift, "here is a docker image, do you best to make all the pieces needed to make this run as a user would expect in OpenShift. 

If you go back to the Web UI and look in the webpages project you should see something like this (may take a while depending on the time it takes to download the Docker image):

image::images/common/6_one_docker_image.png[]

Now is a good time to reflect back on the <<intro_to_os.asciidoc#arch-image, the architecture diagram>> I explained earlier and think about the objects created above. Start from the pod and work our way up to _Services_ and _Deployment Configurations_

===Making a Route to our 

Web content here:

/opt/rh/nginx16/root/usr/share/nginx/html
Go in through terminal or oc rsh 

echo  "hello world" > index.html

Then reload page


<<<
