== Beginning Your Application

Let's go ahead and start our own project using Python. I chose Python for this workshop because I thought it would be easiest for you folks to understand regardless of your coding background. The development pattern you are going to use today will apply to any language you use for development in OpenShift.


=== Bringing in the Code

==== Making a project

Let's make a new project for this application:

[source, bash]
----

> oc new-project spatialapp
Now using project "spatialapp" on server "https://10.2.2.2:8443"...

----

That's it - you now a project "spatialapp" and all the subsequent commands will affect this project until you swith to another project.

==== Adding Code and Doing a Build

The source code for this project can be found here:

https://github.com/thesteve0/v3simple-spatial

Now *BEFORE* you go and _git clone_ it down to your machine, you need to fork it. See that button up towards the top right that says fork on it - [underline]#click it# (you did login with your github account right?)

image::images/common/2_fork.png[]

Now you should be looking at URL that replaces _thesteve0_ with your github userid:

https://github.com/<your_userid>/v3simple-spatial

In the middle of the page you will see a button that may say *SSH* on it. If it does, please change that to HTTPS and then click the clipboard to copy the URL in the box.

image::images/common/2_ssh_to_https.png[]

Our code is ready. Let's fire off the build and deploy. In your terminal enter the following command:

[source, bash]
----

> oc new-app python:3.5~https://github.com/thesteve0/v3simple-spatial.git
--> Found image 87d749a (2 weeks old) in image stream "python" in project "openshift" under tag "3.5" for "python:3.5"

    Python 3.5
    ----------
    Platform for building and running Python 3.5 applications

    Tags: builder, python, python35, rh-python35

    * A source build using source code from https://github.com/thesteve0/v3simple-spatial.git will be created
      * The resulting image will be pushed to image stream "v3simple-spatial:latest"
    * This image will be deployed in deployment config "v3simple-spatial"
    * Port 8080/tcp will be load balanced by service "v3simple-spatial"
      * Other containers can access this service through the hostname "v3simple-spatial"

--> Creating resources with label app=v3simple-spatial ...
    imagestream "v3simple-spatial" created
    buildconfig "v3simple-spatial" created
    deploymentconfig "v3simple-spatial" created
    service "v3simple-spatial" created
--> Success
    Build scheduled, use 'oc logs -f bc/v3simple-spatial' to track its progress.
    Run 'oc status' to view your app.

----


What we just did is told OpenShift - take this https://github.com/openshift/s2i-python[Docker Image] that knows how to build a standard Python application layout and combine it with this source code and produce a new Docker Image. As part of this process the _new-app_ command knows we will need some other OpenShift objects to actually run that resulting image. The command goes ahead and makes those objects as well.

==== Looking at what we built. 

At this point we are going to switch back to the web terminal since it is easier to look at web sites in a browser. Go ahead and go into your browser and go to the projects page. Once you are looking at all your projects go ahead and click on _spatialapp_.

Your screen should look something like this:

image::images/common/2_create_route.png[]

You can see that we have the 1 pod running our image that was derived from our source code and our builder image. There is also other metadata in the box for the pod that we can return to later. For now I want you to click on the _Create Route_ button that is highlighted in red. This will create a URL where we can see the web page for our pod. By default, nothing is exposed to the outside world and you have to choose to expose it.

Just click _Create_ on the next page that comes up - all the defaults are fine for our us. You could have also done this at the command line with

[source, bash]
----

> oc expose service v3simple-spatial

----

Now when you come back to the Overview page there is a URL for the service ending in .xip.io, go ahead and click it! You will be greated by the following amazing web content:

*hello OpenShift Ninja without DB*

You have now all built and deployed containers with a working URL - give yourselves a pat on the back.

=== Doing Code Changes With a Build

While that web page is AWESOME, you might actually want to change it. OpenShift gives you the ability to change the code in a "hot swap" fasion for rapid iteration development or in a more complete build cycle which creates a new image. For now we will do the more complete build cycle and the "hot swap" later.

Go ahead to your GitHub fork and edit the app.py file right there in GitHub. When looking at the GitHub repo., click on app.py and then on the next page click on the pencil icon in the top right.

image::images/common/2_edit_github.png[]


Then on line 11 change the text to whatever you would like. I recommend something like "Steve is the best instructor EVER!" but your tastes may vary (be wrong).

After you are done with your change go ahead and scroll down the page. If you want to add comments or something to your commit go ahead, but everyone needs to press the big GREEN button. You have now committed your change to your GitHub repository.

If our Vagrant image had an IP that was publically accessible, we could actually set up a web hook trigger in GitHub to tell OpenShift to build on commit to master. Instead we have to fire off the build manually. There are two ways to do this:

1) At the command line you can do:
[source, bash]
----

#get a listing of the build configs (bc)
> oc get bc
NAME               TYPE      FROM      LATEST
v3simple-spatial   Source    Git       1

> oc start-build v3simple-spatial --follow --wait

----

2) You can also use the web console. Click on Browse in the left menu and then choose the builds.

image::images/common/2_builds.png[]

There will only be one build listed on the page, go ahead and click it. Then on the next page in the upper right you will see a button "Start Build", go ahead and click it.

image::images/common/2_start_builds.png[]

On the next page you can look at the what is happening by clicking on the "View Log" link.

image::images/common/2_builds_log.png[]

In the terminal on the resulting page you can watch the entire build and push progress: just like you could in the command line with the --follow flag.

With either the command line or the web console, when you go back to the Overview for your project you will notice that the number next to the deployments has incremented because we have actually done a build AND deployment as part of this process.

You are now certified in the Pousty School of Docker and Cloud management as having completed build and deploy MASTERS!

In the next section we will now move on to add PostGIS to your application.

<<<
